// Code generated by Prisma (prisma@1.18.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  law: (where?: LawWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  law: (where: LawWhereUniqueInput) => Law;
  laws: (
    args?: {
      where?: LawWhereInput;
      orderBy?: LawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<LawNode>;
  lawsConnection: (
    args?: {
      where?: LawWhereInput;
      orderBy?: LawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LawConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLaw: (data: LawCreateInput) => Law;
  updateLaw: (
    args: { data: LawUpdateInput; where: LawWhereUniqueInput }
  ) => Law;
  updateManyLaws: (
    args: { data: LawUpdateInput; where?: LawWhereInput }
  ) => BatchPayload;
  upsertLaw: (
    args: {
      where: LawWhereUniqueInput;
      create: LawCreateInput;
      update: LawUpdateInput;
    }
  ) => Law;
  deleteLaw: (where: LawWhereUniqueInput) => Law;
  deleteManyLaws: (where?: LawWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  law: (
    where?: LawSubscriptionWhereInput
  ) => LawSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type JusticeSystemEnum = "DK" | "ECHR" | "EU";

export type LanguageEnum = "DA" | "EN";

export type LawType =
  | "ANORDNING"
  | "BEKENDTGOERELSE"
  | "CIRKULAERE"
  | "CIRKULAERESKRIVELSE"
  | "IKRAFTTRAEDELSESBEKENDTGOERELSE"
  | "LOV"
  | "LOVBEKENDTGOERELSE"
  | "AENDRINGSLOV"
  | "VEJLEDNING";

export type LawOrderByInput =
  | "altTitle_ASC"
  | "altTitle_DESC"
  | "altSlug_ASC"
  | "altSlug_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "historic_ASC"
  | "historic_DESC"
  | "id_ASC"
  | "id_DESC"
  | "indexedAt_ASC"
  | "indexedAt_DESC"
  | "isSearchable_ASC"
  | "isSearchable_DESC"
  | "justiceSystem_ASC"
  | "justiceSystem_DESC"
  | "language_ASC"
  | "language_DESC"
  | "lawType_ASC"
  | "lawType_DESC"
  | "linkedAt_ASC"
  | "linkedAt_DESC"
  | "ministry_ASC"
  | "ministry_DESC"
  | "permalink_ASC"
  | "permalink_DESC"
  | "publicationDate_ASC"
  | "publicationDate_DESC"
  | "published_ASC"
  | "published_DESC"
  | "scrapedAt_ASC"
  | "scrapedAt_DESC"
  | "shortName_ASC"
  | "shortName_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "title_ASC"
  | "title_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "url_ASC"
  | "url_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LawCreateManyWithoutLawIsBaseForLawInput {
  create?:
    | LawCreateWithoutLawIsBaseForLawInput[]
    | LawCreateWithoutLawIsBaseForLawInput;
  connect?: LawWhereUniqueInput[] | LawWhereUniqueInput;
}

export type LawWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  shortName?: String;
  slug?: String;
  uid?: String;
  url?: String;
}>;

export interface LawUpdateManyWithoutLawIsBaseForLawInput {
  create?:
    | LawCreateWithoutLawIsBaseForLawInput[]
    | LawCreateWithoutLawIsBaseForLawInput;
  delete?: LawWhereUniqueInput[] | LawWhereUniqueInput;
  connect?: LawWhereUniqueInput[] | LawWhereUniqueInput;
  disconnect?: LawWhereUniqueInput[] | LawWhereUniqueInput;
  update?:
    | LawUpdateWithWhereUniqueWithoutLawIsBaseForLawInput[]
    | LawUpdateWithWhereUniqueWithoutLawIsBaseForLawInput;
  upsert?:
    | LawUpsertWithWhereUniqueWithoutLawIsBaseForLawInput[]
    | LawUpsertWithWhereUniqueWithoutLawIsBaseForLawInput;
}

export interface LawUpdateInput {
  altTitle?: String;
  altSlug?: String;
  historic?: Boolean;
  indexedAt?: DateTimeInput;
  isSearchable?: Boolean;
  justiceSystem?: JusticeSystemEnum;
  language?: LanguageEnum;
  lawBasedOnLaw?: LawUpdateManyWithoutLawIsBaseForLawInput;
  lawIsBaseForLaw?: LawUpdateManyWithoutLawBasedOnLawInput;
  lawType?: LawType;
  linkedAt?: DateTimeInput;
  ministry?: String;
  permalink?: String;
  publicationDate?: DateTimeInput;
  published?: Boolean;
  scrapedAt?: DateTimeInput;
  shortName?: String;
  slug?: String;
  title?: String;
  uid?: String;
  url?: String;
}

export interface LawCreateInput {
  altTitle?: String;
  altSlug?: String;
  historic: Boolean;
  indexedAt?: DateTimeInput;
  isSearchable?: Boolean;
  justiceSystem: JusticeSystemEnum;
  language: LanguageEnum;
  lawBasedOnLaw?: LawCreateManyWithoutLawIsBaseForLawInput;
  lawIsBaseForLaw?: LawCreateManyWithoutLawBasedOnLawInput;
  lawType?: LawType;
  linkedAt?: DateTimeInput;
  ministry?: String;
  permalink?: String;
  publicationDate?: DateTimeInput;
  published: Boolean;
  scrapedAt?: DateTimeInput;
  shortName: String;
  slug: String;
  title: String;
  uid: String;
  url: String;
}

export interface LawUpsertWithWhereUniqueWithoutLawBasedOnLawInput {
  where: LawWhereUniqueInput;
  update: LawUpdateWithoutLawBasedOnLawDataInput;
  create: LawCreateWithoutLawBasedOnLawInput;
}

export interface LawUpdateWithWhereUniqueWithoutLawIsBaseForLawInput {
  where: LawWhereUniqueInput;
  data: LawUpdateWithoutLawIsBaseForLawDataInput;
}

export interface LawUpdateWithWhereUniqueWithoutLawBasedOnLawInput {
  where: LawWhereUniqueInput;
  data: LawUpdateWithoutLawBasedOnLawDataInput;
}

export interface LawWhereInput {
  altTitle?: String;
  altTitle_not?: String;
  altTitle_in?: String[] | String;
  altTitle_not_in?: String[] | String;
  altTitle_lt?: String;
  altTitle_lte?: String;
  altTitle_gt?: String;
  altTitle_gte?: String;
  altTitle_contains?: String;
  altTitle_not_contains?: String;
  altTitle_starts_with?: String;
  altTitle_not_starts_with?: String;
  altTitle_ends_with?: String;
  altTitle_not_ends_with?: String;
  altSlug?: String;
  altSlug_not?: String;
  altSlug_in?: String[] | String;
  altSlug_not_in?: String[] | String;
  altSlug_lt?: String;
  altSlug_lte?: String;
  altSlug_gt?: String;
  altSlug_gte?: String;
  altSlug_contains?: String;
  altSlug_not_contains?: String;
  altSlug_starts_with?: String;
  altSlug_not_starts_with?: String;
  altSlug_ends_with?: String;
  altSlug_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  historic?: Boolean;
  historic_not?: Boolean;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  indexedAt?: DateTimeInput;
  indexedAt_not?: DateTimeInput;
  indexedAt_in?: DateTimeInput[] | DateTimeInput;
  indexedAt_not_in?: DateTimeInput[] | DateTimeInput;
  indexedAt_lt?: DateTimeInput;
  indexedAt_lte?: DateTimeInput;
  indexedAt_gt?: DateTimeInput;
  indexedAt_gte?: DateTimeInput;
  isSearchable?: Boolean;
  isSearchable_not?: Boolean;
  justiceSystem?: JusticeSystemEnum;
  justiceSystem_not?: JusticeSystemEnum;
  justiceSystem_in?: JusticeSystemEnum[] | JusticeSystemEnum;
  justiceSystem_not_in?: JusticeSystemEnum[] | JusticeSystemEnum;
  language?: LanguageEnum;
  language_not?: LanguageEnum;
  language_in?: LanguageEnum[] | LanguageEnum;
  language_not_in?: LanguageEnum[] | LanguageEnum;
  lawBasedOnLaw_every?: LawWhereInput;
  lawBasedOnLaw_some?: LawWhereInput;
  lawBasedOnLaw_none?: LawWhereInput;
  lawIsBaseForLaw_every?: LawWhereInput;
  lawIsBaseForLaw_some?: LawWhereInput;
  lawIsBaseForLaw_none?: LawWhereInput;
  lawType?: LawType;
  lawType_not?: LawType;
  lawType_in?: LawType[] | LawType;
  lawType_not_in?: LawType[] | LawType;
  linkedAt?: DateTimeInput;
  linkedAt_not?: DateTimeInput;
  linkedAt_in?: DateTimeInput[] | DateTimeInput;
  linkedAt_not_in?: DateTimeInput[] | DateTimeInput;
  linkedAt_lt?: DateTimeInput;
  linkedAt_lte?: DateTimeInput;
  linkedAt_gt?: DateTimeInput;
  linkedAt_gte?: DateTimeInput;
  ministry?: String;
  ministry_not?: String;
  ministry_in?: String[] | String;
  ministry_not_in?: String[] | String;
  ministry_lt?: String;
  ministry_lte?: String;
  ministry_gt?: String;
  ministry_gte?: String;
  ministry_contains?: String;
  ministry_not_contains?: String;
  ministry_starts_with?: String;
  ministry_not_starts_with?: String;
  ministry_ends_with?: String;
  ministry_not_ends_with?: String;
  permalink?: String;
  permalink_not?: String;
  permalink_in?: String[] | String;
  permalink_not_in?: String[] | String;
  permalink_lt?: String;
  permalink_lte?: String;
  permalink_gt?: String;
  permalink_gte?: String;
  permalink_contains?: String;
  permalink_not_contains?: String;
  permalink_starts_with?: String;
  permalink_not_starts_with?: String;
  permalink_ends_with?: String;
  permalink_not_ends_with?: String;
  publicationDate?: DateTimeInput;
  publicationDate_not?: DateTimeInput;
  publicationDate_in?: DateTimeInput[] | DateTimeInput;
  publicationDate_not_in?: DateTimeInput[] | DateTimeInput;
  publicationDate_lt?: DateTimeInput;
  publicationDate_lte?: DateTimeInput;
  publicationDate_gt?: DateTimeInput;
  publicationDate_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  scrapedAt?: DateTimeInput;
  scrapedAt_not?: DateTimeInput;
  scrapedAt_in?: DateTimeInput[] | DateTimeInput;
  scrapedAt_not_in?: DateTimeInput[] | DateTimeInput;
  scrapedAt_lt?: DateTimeInput;
  scrapedAt_lte?: DateTimeInput;
  scrapedAt_gt?: DateTimeInput;
  scrapedAt_gte?: DateTimeInput;
  shortName?: String;
  shortName_not?: String;
  shortName_in?: String[] | String;
  shortName_not_in?: String[] | String;
  shortName_lt?: String;
  shortName_lte?: String;
  shortName_gt?: String;
  shortName_gte?: String;
  shortName_contains?: String;
  shortName_not_contains?: String;
  shortName_starts_with?: String;
  shortName_not_starts_with?: String;
  shortName_ends_with?: String;
  shortName_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  uid?: String;
  uid_not?: String;
  uid_in?: String[] | String;
  uid_not_in?: String[] | String;
  uid_lt?: String;
  uid_lte?: String;
  uid_gt?: String;
  uid_gte?: String;
  uid_contains?: String;
  uid_not_contains?: String;
  uid_starts_with?: String;
  uid_not_starts_with?: String;
  uid_ends_with?: String;
  uid_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: LawWhereInput[] | LawWhereInput;
  OR?: LawWhereInput[] | LawWhereInput;
  NOT?: LawWhereInput[] | LawWhereInput;
}

export interface LawCreateWithoutLawBasedOnLawInput {
  altTitle?: String;
  altSlug?: String;
  historic: Boolean;
  indexedAt?: DateTimeInput;
  isSearchable?: Boolean;
  justiceSystem: JusticeSystemEnum;
  language: LanguageEnum;
  lawIsBaseForLaw?: LawCreateManyWithoutLawBasedOnLawInput;
  lawType?: LawType;
  linkedAt?: DateTimeInput;
  ministry?: String;
  permalink?: String;
  publicationDate?: DateTimeInput;
  published: Boolean;
  scrapedAt?: DateTimeInput;
  shortName: String;
  slug: String;
  title: String;
  uid: String;
  url: String;
}

export interface LawCreateManyWithoutLawBasedOnLawInput {
  create?:
    | LawCreateWithoutLawBasedOnLawInput[]
    | LawCreateWithoutLawBasedOnLawInput;
  connect?: LawWhereUniqueInput[] | LawWhereUniqueInput;
}

export interface LawCreateWithoutLawIsBaseForLawInput {
  altTitle?: String;
  altSlug?: String;
  historic: Boolean;
  indexedAt?: DateTimeInput;
  isSearchable?: Boolean;
  justiceSystem: JusticeSystemEnum;
  language: LanguageEnum;
  lawBasedOnLaw?: LawCreateManyWithoutLawIsBaseForLawInput;
  lawType?: LawType;
  linkedAt?: DateTimeInput;
  ministry?: String;
  permalink?: String;
  publicationDate?: DateTimeInput;
  published: Boolean;
  scrapedAt?: DateTimeInput;
  shortName: String;
  slug: String;
  title: String;
  uid: String;
  url: String;
}

export interface LawUpdateManyWithoutLawBasedOnLawInput {
  create?:
    | LawCreateWithoutLawBasedOnLawInput[]
    | LawCreateWithoutLawBasedOnLawInput;
  delete?: LawWhereUniqueInput[] | LawWhereUniqueInput;
  connect?: LawWhereUniqueInput[] | LawWhereUniqueInput;
  disconnect?: LawWhereUniqueInput[] | LawWhereUniqueInput;
  update?:
    | LawUpdateWithWhereUniqueWithoutLawBasedOnLawInput[]
    | LawUpdateWithWhereUniqueWithoutLawBasedOnLawInput;
  upsert?:
    | LawUpsertWithWhereUniqueWithoutLawBasedOnLawInput[]
    | LawUpsertWithWhereUniqueWithoutLawBasedOnLawInput;
}

export interface LawUpdateWithoutLawBasedOnLawDataInput {
  altTitle?: String;
  altSlug?: String;
  historic?: Boolean;
  indexedAt?: DateTimeInput;
  isSearchable?: Boolean;
  justiceSystem?: JusticeSystemEnum;
  language?: LanguageEnum;
  lawIsBaseForLaw?: LawUpdateManyWithoutLawBasedOnLawInput;
  lawType?: LawType;
  linkedAt?: DateTimeInput;
  ministry?: String;
  permalink?: String;
  publicationDate?: DateTimeInput;
  published?: Boolean;
  scrapedAt?: DateTimeInput;
  shortName?: String;
  slug?: String;
  title?: String;
  uid?: String;
  url?: String;
}

export interface LawSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LawWhereInput;
  AND?: LawSubscriptionWhereInput[] | LawSubscriptionWhereInput;
  OR?: LawSubscriptionWhereInput[] | LawSubscriptionWhereInput;
  NOT?: LawSubscriptionWhereInput[] | LawSubscriptionWhereInput;
}

export interface LawUpdateWithoutLawIsBaseForLawDataInput {
  altTitle?: String;
  altSlug?: String;
  historic?: Boolean;
  indexedAt?: DateTimeInput;
  isSearchable?: Boolean;
  justiceSystem?: JusticeSystemEnum;
  language?: LanguageEnum;
  lawBasedOnLaw?: LawUpdateManyWithoutLawIsBaseForLawInput;
  lawType?: LawType;
  linkedAt?: DateTimeInput;
  ministry?: String;
  permalink?: String;
  publicationDate?: DateTimeInput;
  published?: Boolean;
  scrapedAt?: DateTimeInput;
  shortName?: String;
  slug?: String;
  title?: String;
  uid?: String;
  url?: String;
}

export interface LawUpsertWithWhereUniqueWithoutLawIsBaseForLawInput {
  where: LawWhereUniqueInput;
  update: LawUpdateWithoutLawIsBaseForLawDataInput;
  create: LawCreateWithoutLawIsBaseForLawInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface LawPreviousValuesNode {
  altTitle?: String;
  altSlug?: String;
  createdAt: DateTimeOutput;
  historic: Boolean;
  id: ID_Output;
  indexedAt?: DateTimeOutput;
  isSearchable: Boolean;
  justiceSystem: JusticeSystemEnum;
  language: LanguageEnum;
  lawType?: LawType;
  linkedAt?: DateTimeOutput;
  ministry?: String;
  permalink?: String;
  publicationDate?: DateTimeOutput;
  published: Boolean;
  scrapedAt?: DateTimeOutput;
  shortName: String;
  slug: String;
  title: String;
  uid: String;
  updatedAt: DateTimeOutput;
  url: String;
}

export interface LawPreviousValues
  extends Promise<LawPreviousValuesNode>,
    Fragmentable {
  altTitle: () => Promise<String>;
  altSlug: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  historic: () => Promise<Boolean>;
  id: () => Promise<ID_Output>;
  indexedAt: () => Promise<DateTimeOutput>;
  isSearchable: () => Promise<Boolean>;
  justiceSystem: () => Promise<JusticeSystemEnum>;
  language: () => Promise<LanguageEnum>;
  lawType: () => Promise<LawType>;
  linkedAt: () => Promise<DateTimeOutput>;
  ministry: () => Promise<String>;
  permalink: () => Promise<String>;
  publicationDate: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  scrapedAt: () => Promise<DateTimeOutput>;
  shortName: () => Promise<String>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
  uid: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
}

export interface LawPreviousValuesSubscription
  extends Promise<AsyncIterator<LawPreviousValuesNode>>,
    Fragmentable {
  altTitle: () => Promise<AsyncIterator<String>>;
  altSlug: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  historic: () => Promise<AsyncIterator<Boolean>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  indexedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isSearchable: () => Promise<AsyncIterator<Boolean>>;
  justiceSystem: () => Promise<AsyncIterator<JusticeSystemEnum>>;
  language: () => Promise<AsyncIterator<LanguageEnum>>;
  lawType: () => Promise<AsyncIterator<LawType>>;
  linkedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ministry: () => Promise<AsyncIterator<String>>;
  permalink: () => Promise<AsyncIterator<String>>;
  publicationDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  scrapedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  shortName: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  uid: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateLawNode {
  count: Int;
}

export interface AggregateLaw extends Promise<AggregateLawNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLawSubscription
  extends Promise<AsyncIterator<AggregateLawNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LawSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LawSubscriptionPayload
  extends Promise<LawSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Law>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LawPreviousValues>() => T;
}

export interface LawSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LawSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LawSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LawPreviousValuesSubscription>() => T;
}

export interface LawConnectionNode {}

export interface LawConnection
  extends Promise<LawConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<LawEdgeNode>>() => T;
  aggregate: <T = AggregateLaw>() => T;
}

export interface LawConnectionSubscription
  extends Promise<AsyncIterator<LawConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LawEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLawSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LawEdgeNode {
  cursor: String;
}

export interface LawEdge extends Promise<LawEdgeNode>, Fragmentable {
  node: <T = Law>() => T;
  cursor: () => Promise<String>;
}

export interface LawEdgeSubscription
  extends Promise<AsyncIterator<LawEdgeNode>>,
    Fragmentable {
  node: <T = LawSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LawNode {
  altTitle?: String;
  altSlug?: String;
  createdAt: DateTimeOutput;
  historic: Boolean;
  id: ID_Output;
  indexedAt?: DateTimeOutput;
  isSearchable: Boolean;
  justiceSystem: JusticeSystemEnum;
  language: LanguageEnum;
  lawType?: LawType;
  linkedAt?: DateTimeOutput;
  ministry?: String;
  permalink?: String;
  publicationDate?: DateTimeOutput;
  published: Boolean;
  scrapedAt?: DateTimeOutput;
  shortName: String;
  slug: String;
  title: String;
  uid: String;
  updatedAt: DateTimeOutput;
  url: String;
}

export interface Law extends Promise<LawNode>, Fragmentable {
  altTitle: () => Promise<String>;
  altSlug: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  historic: () => Promise<Boolean>;
  id: () => Promise<ID_Output>;
  indexedAt: () => Promise<DateTimeOutput>;
  isSearchable: () => Promise<Boolean>;
  justiceSystem: () => Promise<JusticeSystemEnum>;
  language: () => Promise<LanguageEnum>;
  lawBasedOnLaw: <T = FragmentableArray<LawNode>>(
    args?: {
      where?: LawWhereInput;
      orderBy?: LawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lawIsBaseForLaw: <T = FragmentableArray<LawNode>>(
    args?: {
      where?: LawWhereInput;
      orderBy?: LawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lawType: () => Promise<LawType>;
  linkedAt: () => Promise<DateTimeOutput>;
  ministry: () => Promise<String>;
  permalink: () => Promise<String>;
  publicationDate: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  scrapedAt: () => Promise<DateTimeOutput>;
  shortName: () => Promise<String>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
  uid: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
}

export interface LawSubscription
  extends Promise<AsyncIterator<LawNode>>,
    Fragmentable {
  altTitle: () => Promise<AsyncIterator<String>>;
  altSlug: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  historic: () => Promise<AsyncIterator<Boolean>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  indexedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isSearchable: () => Promise<AsyncIterator<Boolean>>;
  justiceSystem: () => Promise<AsyncIterator<JusticeSystemEnum>>;
  language: () => Promise<AsyncIterator<LanguageEnum>>;
  lawBasedOnLaw: <T = Promise<AsyncIterator<LawSubscription>>>(
    args?: {
      where?: LawWhereInput;
      orderBy?: LawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lawIsBaseForLaw: <T = Promise<AsyncIterator<LawSubscription>>>(
    args?: {
      where?: LawWhereInput;
      orderBy?: LawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lawType: () => Promise<AsyncIterator<LawType>>;
  linkedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ministry: () => Promise<AsyncIterator<String>>;
  permalink: () => Promise<AsyncIterator<String>>;
  publicationDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  scrapedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  shortName: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  uid: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `http://localhost:4466`,
  secret: `penis`
});
export const prisma = new Prisma();
